import { entregaService, ItemEntrega, EscolaEntrega, RotaEntrega, ConfirmarEntregaData } from './entregaService';
import { offlineService } from './offlineService';

class EntregaServiceHybrid {
  
  // ========== ROTAS ==========
  
  async listarTodasRotas(): Promise<RotaEntrega[]> {
    // Verificar se est√° offline primeiro
    const isOffline = await offlineService.isOffline();
    
    if (isOffline) {
      console.log('üì± Modo offline detectado, usando cache local para rotas');
      
      const rotasCache = await offlineService.obterRotasCache();
      
      if (rotasCache.length === 0) {
        throw new Error('Nenhuma rota dispon√≠vel offline. Conecte-se √† internet para sincronizar.');
      }
      
      return rotasCache;
    }
    
    try {
      // Usar listarRotas que j√° tem suporte a filtros da configura√ß√£o
      const rotas = await entregaService.listarRotas();
      
      // Salvar no cache para uso offline
      await offlineService.salvarRotasCache(rotas);
      
      return rotas;
    } catch (error) {
      console.log('üì± Falha na conex√£o, usando cache local para rotas');
      
      // Se falhar, usar cache local
      const rotasCache = await offlineService.obterRotasCache();
      
      if (rotasCache.length === 0) {
        throw new Error('Nenhuma rota dispon√≠vel offline. Conecte-se √† internet para sincronizar.');
      }
      
      return rotasCache;
    }
  }

  async listarRotas(guiaId?: number): Promise<RotaEntrega[]> {
    // Verificar se est√° offline primeiro
    const isOffline = await offlineService.isOffline();
    
    if (isOffline) {
      console.log('üì± Modo offline detectado, usando cache local para rotas com entregas');
      
      const rotasCache = await offlineService.obterRotasCache();
      
      if (rotasCache.length === 0) {
        throw new Error('Nenhuma rota dispon√≠vel offline. Conecte-se √† internet para sincronizar.');
      }
      
      return rotasCache;
    }
    
    try {
      // Tentar buscar online
      const rotas = await entregaService.listarRotas(guiaId);
      
      // Salvar no cache para uso offline
      await offlineService.salvarRotasCache(rotas);
      
      return rotas;
    } catch (error) {
      console.log('üì± Falha na conex√£o, usando cache local para rotas com entregas');
      
      // Se falhar, usar cache local
      const rotasCache = await offlineService.obterRotasCache();
      
      if (rotasCache.length === 0) {
        throw new Error('Nenhuma rota dispon√≠vel offline. Conecte-se √† internet para sincronizar.');
      }
      
      return rotasCache;
    }
  }

  // ========== ESCOLAS ==========
  
  async listarEscolasRota(rotaId?: number, guiaId?: number): Promise<EscolaEntrega[]> {
    // Verificar se est√° offline primeiro
    const isOffline = await offlineService.isOffline();
    
    if (isOffline) {
      console.log(`üì± Modo offline detectado, usando cache local para escolas (rota: ${rotaId})`);
      
      const cacheDisponivel = await this.verificarCacheDisponivel();
      if (!cacheDisponivel) {
        throw new Error('Dados n√£o dispon√≠veis offline. Conecte-se √† internet primeiro para baixar os dados.');
      }
      
      const escolasCache = await offlineService.obterEscolasCache(rotaId);
      
      if (escolasCache.length === 0) {
        throw new Error('Nenhuma escola desta rota dispon√≠vel offline. Conecte-se √† internet para sincronizar.');
      }
      
      return escolasCache;
    }
    
    try {
      // Tentar buscar online
      const escolas = await entregaService.listarEscolasRota(rotaId, guiaId);
      
      // Salvar no cache para uso offline
      await offlineService.salvarEscolasCache(escolas, rotaId);
      
      return escolas;
    } catch (error) {
      console.log(`üì± Falha na conex√£o, usando cache local para escolas (rota: ${rotaId})`);
      
      // Se falhar, usar cache local
      const escolasCache = await offlineService.obterEscolasCache(rotaId);
      
      if (escolasCache.length === 0) {
        throw new Error('Nenhuma escola dispon√≠vel offline. Conecte-se √† internet para sincronizar.');
      }
      
      return escolasCache;
    }
  }

  // ========== ITENS ==========
  
  async listarItensEscola(escolaId: number, guiaId?: number): Promise<ItemEntrega[]> {
    // Verificar se est√° offline primeiro
    const isOffline = await offlineService.isOffline();
    
    if (isOffline) {
      console.log(`üì± Modo offline detectado, usando cache local para itens da escola ${escolaId}`);
      
      const cacheDisponivel = await this.verificarCacheDisponivel();
      if (!cacheDisponivel) {
        throw new Error('Dados n√£o dispon√≠veis offline. Conecte-se √† internet primeiro para baixar os dados.');
      }
      
      const itensCache = await offlineService.obterItensEscolaCache(escolaId);
      
      if (itensCache.length === 0) {
        throw new Error('Nenhum item desta escola dispon√≠vel offline. Conecte-se √† internet para sincronizar.');
      }
      
      return itensCache;
    }
    
    try {
      // Tentar buscar online
      const itens = await entregaService.listarItensEscola(escolaId, guiaId);
      
      // Salvar no cache para uso offline
      await offlineService.salvarItensEscolaCache(escolaId, itens);
      
      return itens;
    } catch (error) {
      console.log(`üì± Falha na conex√£o, usando cache local para itens da escola ${escolaId}`);
      
      // Se falhar, usar cache local
      const itensCache = await offlineService.obterItensEscolaCache(escolaId);
      
      if (itensCache.length === 0) {
        throw new Error('Nenhum item dispon√≠vel offline. Conecte-se √† internet para sincronizar.');
      }
      
      return itensCache;
    }
  }

  async buscarItem(itemId: number): Promise<ItemEntrega> {
    try {
      // Tentar buscar online primeiro
      return await entregaService.buscarItem(itemId);
    } catch (error) {
      console.log(`üì± Sem conex√£o, buscando item ${itemId} no cache local`);
      
      // Buscar em todos os caches de escolas
      // (implementa√ß√£o simplificada - em produ√ß√£o seria mais eficiente)
      throw new Error('Item n√£o dispon√≠vel offline. Conecte-se √† internet.');
    }
  }

  // ========== OPERA√á√ïES DE ENTREGA (COM SUPORTE OFFLINE) ==========
  
  async confirmarEntrega(itemId: number, dados: ConfirmarEntregaData): Promise<{ message: string; item: ItemEntrega }> {
    console.log(`üîÑ Iniciando confirma√ß√£o de entrega - Item ID: ${itemId}`);
    
    try {
      // Verificar se est√° offline
      const isOffline = await offlineService.isOffline();
      console.log(`üì∂ Status offline: ${isOffline}`);
      
      if (isOffline) {
        console.log('üì± Modo offline detectado, usando confirma√ß√£o offline');
        return await this.confirmarEntregaOffline(itemId, dados);
      }
      
      console.log('üåê Tentando confirmar entrega online');
      // Tentar confirmar online
      const resultado = await entregaService.confirmarEntrega(itemId, dados);
      
      // Atualizar cache local com o resultado
      await this.atualizarItemNoCache(resultado.item);
      
      console.log('‚úÖ Entrega confirmada online com sucesso');
      return resultado;
      
    } catch (error: any) {
      console.log('‚ùå Erro ao confirmar entrega, tentando modo offline');
      console.error('Tipo de erro:', error?.constructor?.name);
      console.error('Mensagem:', error?.message);
      console.error('C√≥digo:', error?.code);
      
      // SEMPRE tentar offline em caso de erro
      console.log('üî¥ For√ßando modo offline devido ao erro');
      return await this.confirmarEntregaOffline(itemId, dados);
    }
  }

  private async confirmarEntregaOffline(itemId: number, dados: ConfirmarEntregaData): Promise<{ message: string; item: ItemEntrega }> {
    console.log(`üì± Confirmando entrega offline - Item ID: ${itemId}`);
    
    // Verificar se h√° cache dispon√≠vel
    const cacheDisponivel = await this.verificarCacheDisponivel();
    if (!cacheDisponivel) {
      console.error(`‚ùå Nenhum dado em cache dispon√≠vel`);
      throw new Error('‚ö†Ô∏è DADOS N√ÉO DISPON√çVEIS OFFLINE\n\nPara usar o app offline, voc√™ precisa:\n1. Conectar √† internet\n2. Abrir o app e navegar pelas rotas/escolas\n3. Os dados ser√£o baixados automaticamente\n\nDepois disso, voc√™ poder√° trabalhar offline.');
    }
    
    // Buscar item no cache para atualizar
    console.log(`üîç Buscando item ${itemId} no cache...`);
    const item = await this.buscarItemNoCache(itemId);
    
    if (!item) {
      console.error(`‚ùå Item ${itemId} n√£o encontrado no cache local`);
      await offlineService.debugCache(); // Debug para ver o que tem no cache
      throw new Error(`Item ${itemId} n√£o encontrado no cache local.\n\nConecte-se √† internet e navegue at√© esta escola para baixar os dados.`);
    }
    
    console.log(`‚úÖ Item ${itemId} encontrado no cache:`, item.produto_nome);
    console.log(`üìã Escola ID do item: ${item.escola_id}`);

    if (!item.escola_id || item.escola_id === 0) {
      console.error(`‚ùå Item ${itemId} tem escola_id inv√°lido no cache:`, item.escola_id);
      throw new Error('Erro: Item com dados incompletos no cache. Reconecte √† internet e sincronize novamente.');
    }

    if (item.entrega_confirmada) {
      console.error(`‚ùå Item ${itemId} j√° foi entregue`);
      throw new Error('Este item j√° foi entregue');
    }

    console.log(`üìù Atualizando item ${itemId} no cache local`);

    // Atualizar item localmente
    const itemAtualizado: ItemEntrega = {
      ...item,
      entrega_confirmada: true,
      quantidade_entregue: dados.quantidade_entregue,
      data_entrega: new Date().toISOString(),
      nome_quem_entregou: dados.nome_quem_entregou,
      nome_quem_recebeu: dados.nome_quem_recebeu,
    };

    // Salvar no cache local
    await offlineService.atualizarItemCache(item.escola_id, itemAtualizado);
    console.log(`üíæ Item ${itemId} atualizado no cache da escola ${item.escola_id}`);

    // Adicionar √† fila de sincroniza√ß√£o
    const operacaoId = await offlineService.adicionarOperacaoFila({
      tipo: 'confirmar_entrega',
      itemId,
      dados,
    });

    console.log(`üì§ Opera√ß√£o ${operacaoId} adicionada √† fila de sincroniza√ß√£o`);

    return {
      message: 'Entrega confirmada offline - ser√° sincronizada automaticamente quando conectar',
      item: itemAtualizado,
    };
  }

  async cancelarEntrega(itemId: number): Promise<{ message: string; item: ItemEntrega }> {
    console.log(`üîÑ Iniciando cancelamento de entrega - Item ID: ${itemId}`);
    
    try {
      // Verificar se est√° offline
      const isOffline = await offlineService.isOffline();
      console.log(`üì∂ Status offline: ${isOffline}`);
      
      if (isOffline) {
        console.log('üì± Modo offline detectado, usando cancelamento offline');
        return await this.cancelarEntregaOffline(itemId);
      }
      
      console.log('üåê Tentando cancelar entrega online');
      // Tentar cancelar online
      const resultado = await entregaService.cancelarEntrega(itemId);
      
      // Atualizar cache local com o resultado
      await this.atualizarItemNoCache(resultado.item);
      
      console.log('‚úÖ Entrega cancelada online com sucesso');
      return resultado;
      
    } catch (error: any) {
      console.log('‚ùå Erro ao cancelar entrega, tentando modo offline');
      console.error('Tipo de erro:', error?.constructor?.name);
      console.error('Mensagem:', error?.message);
      
      // SEMPRE tentar offline em caso de erro
      console.log('üî¥ For√ßando modo offline devido ao erro');
      return await this.cancelarEntregaOffline(itemId);
    }
  }

  private async cancelarEntregaOffline(itemId: number): Promise<{ message: string; item: ItemEntrega }> {
    console.log(`üì± Cancelando entrega offline - Item ID: ${itemId}`);
    
    // Buscar item no cache para atualizar
    const item = await this.buscarItemNoCache(itemId);
    
    if (!item) {
      console.error(`‚ùå Item ${itemId} n√£o encontrado no cache local`);
      throw new Error('Item n√£o encontrado no cache local. Conecte-se √† internet para sincronizar.');
    }

    console.log(`‚úÖ Item ${itemId} encontrado no cache:`, item.produto_nome);
    console.log(`üìã Escola ID do item: ${item.escola_id}`);

    if (!item.escola_id || item.escola_id === 0) {
      console.error(`‚ùå Item ${itemId} tem escola_id inv√°lido no cache:`, item.escola_id);
      throw new Error('Erro: Item com dados incompletos no cache. Reconecte √† internet e sincronize novamente.');
    }

    if (!item.entrega_confirmada) {
      console.error(`‚ùå Item ${itemId} n√£o foi entregue ainda`);
      throw new Error('Este item n√£o foi entregue ainda');
    }

    console.log(`üìù Cancelando entrega do item ${itemId} no cache local`);

    // Atualizar item localmente
    const itemAtualizado: ItemEntrega = {
      ...item,
      entrega_confirmada: false,
      quantidade_entregue: undefined,
      data_entrega: undefined,
      nome_quem_entregou: undefined,
      nome_quem_recebeu: undefined,
    };

    // Salvar no cache local
    await offlineService.atualizarItemCache(item.escola_id, itemAtualizado);
    console.log(`üíæ Item ${itemId} atualizado no cache da escola ${item.escola_id}`);

    // Adicionar √† fila de sincroniza√ß√£o
    const operacaoId = await offlineService.adicionarOperacaoFila({
      tipo: 'cancelar_entrega',
      itemId,
    });

    console.log(`üì§ Opera√ß√£o ${operacaoId} adicionada √† fila de sincroniza√ß√£o`);

    return {
      message: 'Entrega cancelada offline - ser√° sincronizada automaticamente quando conectar',
      item: itemAtualizado,
    };
  }

  // ========== M√âTODOS AUXILIARES ==========
  
  async verificarCacheDisponivel(): Promise<boolean> {
    try {
      const rotas = await offlineService.obterRotasCache();
      return rotas.length > 0;
    } catch (error) {
      return false;
    }
  }
  
  private async buscarItemNoCache(itemId: number): Promise<ItemEntrega | null> {
    try {
      // Buscar em todos os caches de escolas
      const rotas = await offlineService.obterRotasCache();
      
      for (const rota of rotas) {
        const escolas = await offlineService.obterEscolasCache(rota.id);
        
        for (const escola of escolas) {
          const itens = await offlineService.obterItensEscolaCache(escola.id);
          const item = itens.find(i => i.id === itemId);
          
          if (item) {
            return item;
          }
        }
      }
      
      return null;
    } catch (error) {
      console.error('Erro ao buscar item no cache:', error);
      return null;
    }
  }

  private async atualizarItemNoCache(item: ItemEntrega): Promise<void> {
    if (!item.escola_id || item.escola_id === 0) {
      console.error(`‚ùå Item ${item.id} tem escola_id inv√°lido:`, item.escola_id);
      console.log(`‚ö†Ô∏è Pulando atualiza√ß√£o do cache para este item`);
      return;
    }
    await offlineService.atualizarItemCache(item.escola_id, item);
  }

  // ========== M√âTODOS DE SINCRONIZA√á√ÉO ==========

  // Pr√©-carregar todos os dados necess√°rios para uso offline
  async preCarregarDados(): Promise<void> {
    console.log('üì• Pr√©-carregando dados do servidor...');
    
    try {
      // 1. Carregar todas as rotas
      console.log('üì• Carregando rotas...');
      const rotas = await entregaService.listarTodasRotas();
      await offlineService.salvarRotasCache(rotas);
      console.log(`‚úÖ ${rotas.length} rotas salvas no cache`);
      
      // 2. Para cada rota, carregar escolas
      for (const rota of rotas) {
        try {
          console.log(`üì• Carregando escolas da rota: ${rota.nome}`);
          const escolas = await entregaService.listarEscolasRota(rota.id);
          await offlineService.salvarEscolasCache(escolas, rota.id);
          console.log(`‚úÖ ${escolas.length} escolas da rota ${rota.nome} salvas no cache`);
          
          // 3. Para cada escola, carregar itens
          for (const escola of escolas) {
            try {
              console.log(`üì• Carregando itens da escola: ${escola.nome}`);
              const itens = await entregaService.listarItensEscola(escola.id);
              await offlineService.salvarItensEscolaCache(escola.id, itens);
              console.log(`‚úÖ ${itens.length} itens da escola ${escola.nome} salvos no cache`);
            } catch (error) {
              console.error(`‚ùå Erro ao carregar itens da escola ${escola.nome}:`, error);
            }
          }
        } catch (error) {
          console.error(`‚ùå Erro ao carregar escolas da rota ${rota.nome}:`, error);
        }
      }
      
      console.log('üéâ Pr√©-carregamento completo! App pronto para uso offline.');
    } catch (error) {
      console.error('‚ùå Erro durante pr√©-carregamento:', error);
      throw error;
    }
  }





  // ========== M√âTODOS DELEGADOS (SEM CACHE) ==========
  
  async obterEstatisticas(guiaId?: number, rotaId?: number) {
    try {
      // Tentar buscar online
      return await entregaService.obterEstatisticas(guiaId, rotaId);
    } catch (error) {
      // Se falhar (offline ou erro de rede), retornar null
      // A tela vai calcular as estat√≠sticas localmente
      console.log('Estat√≠sticas n√£o dispon√≠veis online, usando dados locais');
      return null;
    }
  }

  async listarPlanejamentos(guiaId?: number, rotaId?: number) {
    return entregaService.listarPlanejamentos(guiaId, rotaId);
  }

  async salvarFotoLocal(itemId: number, fotoUri: string) {
    try {
      console.log(`üì∏ Salvando foto local para item ${itemId}`);
      return entregaService.salvarFotoLocal(itemId, fotoUri);
    } catch (error) {
      console.error(`‚ùå Erro ao salvar foto local:`, error);
      // N√£o bloquear a confirma√ß√£o se a foto falhar
      return fotoUri;
    }
  }
}

export const entregaServiceHybrid = new EntregaServiceHybrid();