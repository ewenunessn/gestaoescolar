import { Request, Response } from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { findUserByEmail, createUser, User } from "../models/User";
import { config } from "../config/config";

// Registro de novo usu√°rio
export async function register(req: Request, res: Response) {
  try {
    const { nome, email, senha, perfil, telefone, cargo, departamento } = req.body;
    
    // Validar campos obrigat√≥rios
    if (!nome || !email || !senha || !perfil) {
      return res
        .status(400)
        .json({ message: "Dados obrigat√≥rios n√£o informados." });
    }

    // Verificar se e-mail j√° existe
    const existente = await findUserByEmail(email);
    if (existente) {
      return res.status(409).json({ message: "E-mail j√° cadastrado." });
    }

    // Hash da senha
    const hash = await bcrypt.hash(senha, 10);
    
    // Criar usu√°rio com campos b√°sicos (usando 'tipo' em vez de 'perfil')
    const novo = await createUser({ 
      nome, 
      email, 
      senha: hash, 
      tipo: perfil,  // Mapear perfil para tipo
      ativo: true    // Campo obrigat√≥rio
    });

    res.status(201).json({
      id: novo.id,
      nome: novo.nome,
      email: novo.email,
      tipo: novo.tipo
    });
  } catch (err) {
    console.error('Erro no registro:', err);
    res.status(500).json({ message: "Erro ao registrar usu√°rio." });
  }
}

// Login de usu√°rio
export async function login(req: Request, res: Response) {
  try {
    console.log("üîê Tentativa de login:", { email: req.body.email });

    const { email, senha } = req.body;

    if (!email || !senha) {
      console.log("‚ùå Email ou senha n√£o fornecidos");
      return res.status(400).json({ message: "Email e senha s√£o obrigat√≥rios." });
    }

    console.log("üîç Buscando usu√°rio no banco...");
    const user = await findUserByEmail(email);

    if (!user) {
      console.log("‚ùå Usu√°rio n√£o encontrado:", email);
      return res.status(401).json({ message: "Usu√°rio ou senha inv√°lidos." });
    }

    console.log("‚úÖ Usu√°rio encontrado, verificando senha...");
    const match = await bcrypt.compare(senha, user.senha);

    if (!match) {
      console.log("‚ùå Senha incorreta para:", email);
      return res.status(401).json({ message: "Usu√°rio ou senha inv√°lidos." });
    }

    console.log("‚úÖ Senha correta, gerando token...");
    const token = jwt.sign(
      { id: user.id, tipo: user.tipo },
      config.jwtSecret,
      { expiresIn: '24h' }
    );

    console.log("‚úÖ Login realizado com sucesso para:", email);
    res.json({ token, tipo: user.tipo, nome: user.nome });
  } catch (err) {
    console.error("üí• Erro cr√≠tico no login:", err);
    res.status(500).json({ message: "Erro ao fazer login." });
  }
}
