const db = require('../database');
const fs = require('fs');
const path = require('path');

/**
 * Sistema de Migra√ß√£o Autom√°tica
 * Verifica e cria tabelas automaticamente quando n√£o existem
 */
class AutoMigration {
  constructor() {
    this.migrationsPath = path.join(__dirname, '../../migrations');
    this.executedMigrations = new Set();
  }

  /**
   * Verifica se uma tabela existe no banco
   */
  async tableExists(tableName) {
    try {
      const result = await db.query(
        `SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = $1
        )`,
        [tableName]
      );
      return result.rows[0].exists;
    } catch (error) {
      console.error(`Erro ao verificar tabela ${tableName}:`, error.message);
      return false;
    }
  }

  /**
   * Verifica se a tabela de controle de migra√ß√µes existe
   */
  async ensureMigrationTable() {
    try {
      const exists = await this.tableExists('schema_migrations');
      if (!exists) {
        await db.query(`
          CREATE TABLE schema_migrations (
            id SERIAL PRIMARY KEY,
            migration_name VARCHAR(255) NOT NULL UNIQUE,
            executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
        `);
        console.log('‚úÖ Tabela de controle de migra√ß√µes criada');
      }
    } catch (error) {
      console.error('‚ùå Erro ao criar tabela de migra√ß√µes:', error.message);
    }
  }

  /**
   * Obt√©m migra√ß√µes j√° executadas
   */
  async getExecutedMigrations() {
    try {
      const result = await db.query('SELECT migration_name FROM schema_migrations');
      return new Set(result.rows.map(row => row.migration_name));
    } catch (error) {
      console.error('Erro ao obter migra√ß√µes executadas:', error.message);
      return new Set();
    }
  }

  /**
   * Marca uma migra√ß√£o como executada
   */
  async markMigrationAsExecuted(migrationName) {
    try {
      await db.query(
        'INSERT INTO schema_migrations (migration_name) VALUES ($1) ON CONFLICT (migration_name) DO NOTHING',
        [migrationName]
      );
    } catch (error) {
      console.error(`Erro ao marcar migra√ß√£o ${migrationName}:`, error.message);
    }
  }

  /**
   * Executa um arquivo SQL de migra√ß√£o
   */
  async executeMigrationFile(filePath, migrationName) {
    try {
      const sqlContent = fs.readFileSync(filePath, 'utf8');
      
      console.log(`üîÑ Executando migra√ß√£o: ${migrationName}`);
      
      // Executar o SQL completo de uma vez
      await db.query(sqlContent);

      await this.markMigrationAsExecuted(migrationName);
      console.log(`‚úÖ Migra√ß√£o ${migrationName} executada com sucesso`);
      
    } catch (error) {
      console.error(`‚ùå Erro ao executar migra√ß√£o ${migrationName}:`, error.message);
      console.error(`üìÑ Arquivo: ${filePath}`);
      throw error;
    }
  }

  /**
   * Verifica e executa migra√ß√µes pendentes
   */
  async runPendingMigrations() {
    try {
      await this.ensureMigrationTable();
      const executedMigrations = await this.getExecutedMigrations();
      
      // Lista arquivos de migra√ß√£o
      const migrationFiles = fs.readdirSync(this.migrationsPath)
        .filter(file => file.endsWith('.sql'))
        .sort();

      let migrationsRun = 0;
      
      for (const file of migrationFiles) {
        const migrationName = path.basename(file, '.sql');
        
        if (!executedMigrations.has(migrationName)) {
          const filePath = path.join(this.migrationsPath, file);
          await this.executeMigrationFile(filePath, migrationName);
          migrationsRun++;
        }
      }

      if (migrationsRun === 0) {
        console.log('‚úÖ Todas as migra√ß√µes j√° foram executadas');
      } else {
        console.log(`‚úÖ ${migrationsRun} migra√ß√£o(√µes) executada(s) com sucesso`);
      }
      
    } catch (error) {
      console.error('‚ùå Erro durante execu√ß√£o de migra√ß√µes:', error.message);
      throw error;
    }
  }

  /**
   * Verifica tabelas essenciais e cria se necess√°rio
   */
  async checkEssentialTables() {
    const essentialTables = [
      'usuarios',
      'fornecedores',
      'produtos',
      'modalidades',
      'escolas',
      'pedidos_v2',
      'pedido_itens_v2',
      'recebimentos_simples'
    ];

    const missingTables = [];
    
    for (const table of essentialTables) {
      const exists = await this.tableExists(table);
      if (!exists) {
        missingTables.push(table);
      }
    }

    if (missingTables.length > 0) {
      console.log(`‚ö†Ô∏è  Tabelas n√£o encontradas: ${missingTables.join(', ')}`);
      console.log('üîÑ Executando migra√ß√µes para criar tabelas...');
      await this.runPendingMigrations();
    } else {
      console.log('‚úÖ Todas as tabelas essenciais existem');
    }
  }

  /**
   * Executa verifica√ß√£o completa e migra√ß√£o autom√°tica
   */
  async autoMigrate() {
    try {
      console.log('üöÄ Iniciando verifica√ß√£o autom√°tica de banco de dados...');
      
      // Testa conex√£o
      const connectionTest = await db.testConnection();
      if (!connectionTest) {
        throw new Error('Falha na conex√£o com o banco de dados');
      }

      // Verifica e executa migra√ß√µes
      await this.checkEssentialTables();
      
      console.log('‚úÖ Verifica√ß√£o autom√°tica conclu√≠da com sucesso!');
      return true;
      
    } catch (error) {
      console.error('‚ùå Erro na migra√ß√£o autom√°tica:', error.message);
      return false;
    }
  }
}

// Fun√ß√£o utilit√°ria para uso direto
async function runAutoMigration() {
  const migration = new AutoMigration();
  return await migration.autoMigrate();
}

module.exports = {
  AutoMigration,
  runAutoMigration
};